
//UI
global proc Align_to_target(){

    if (`window -exists cleanupwindow`)  {
            deleteUI cleanupwindow;
            windowPref -remove cleanupwindow;
    }

    if(`window -q -exists rename_UI`) {
    deleteUI rename_UI; 
    }   
    
    window -w 150 -h 40 -s true -maximizeButton 0 -t "cleanup sketchup file" -le 50 cleanupwindow;    
            
        frameLayout -lv 0 -mw 2 -mh 2;
        rowLayout -nc 6 -adj 6;

        textField -w 170 -h 25 -tx "" OBJSourceSelect;
        button -label "Source" -w 42 -h 25 -command "UpdateSelSource";
        button -label "Target" -w 72 -h 25 -c "PositionCopy()" ;                                    
        setParent ..;

    showWindow cleanupwindow;
}





proc UpdateSelSource(){

    string $sel[] = `ls -sl` ;
    if ($sel[0] == "" )
    return ;    
    centerPivot();
    move -rpr 0 0 0 $sel[0]; 
    FreezeTransformations;
    textField -e -tx $sel[0] OBJSourceSelect;
}





proc PositionCopy(){

    string $baseori = `textField -q -tx OBJSourceSelect`; 

    string $SELLall[] = `ls -sl`;

    for ($SELLalls in $SELLall){
         select -r $SELLalls;
         centerPivot();

         select -r $baseori;
         duplicate -rr;
         string $SELLaBB[] = `ls -sl`;

         string $tar = $SELLalls;
         string $cur = $SELLaBB[0];
         float $bboxTar[] = `xform -q -bb $tar`;
         float $bboxCur[] = `xform -q -bb $cur`;

         float $bboxSizeCur[] = {($bboxCur[3] - $bboxCur[0]), ($bboxCur[4] - $bboxCur[1]), ($bboxCur[5] - $bboxCur[2])};
         float $bboxSizeTar[] = {($bboxTar[3] - $bboxTar[0]), ($bboxTar[4] - $bboxTar[1]), ($bboxTar[5] - $bboxTar[2])};
         float $scaleRatio[] = {($bboxSizeTar[0]/$bboxSizeCur[0]), ($bboxSizeTar[1]/$bboxSizeCur[1]), ($bboxSizeTar[2]/$bboxSizeCur[2])};

         scale -r ($scaleRatio[0]) ($scaleRatio[1]) ($scaleRatio[2]) $cur;

         float $trans[] = `xform -q -ws -sp $SELLalls`;  //find out position
         move $trans[0] $trans[1] $trans[2] $SELLaBB[0];
         int $RandRotSource = `rand 0 360`;
         rotate 0 $RandRotSource 0 $SELLaBB[0];
        }
}




proc matchBBox(string $tar, string $cur){
    float $bboxTar[] = `xform -q -bb $tar`;
    float $bboxCur[] = `xform -q -bb $cur`;
    float $bboxSclCen[] = {($bboxCur[0]+$bboxCur[3])/2, ($bboxCur[1]+$bboxCur[4])/2, ($bboxCur[2]+$bboxCur[5])/2};
    float $bboxSizeCur[] = {($bboxCur[3] - $bboxCur[0]), ($bboxCur[4] - $bboxCur[1]), ($bboxCur[5] - $bboxCur[2])};
    float $bboxSizeTar[] = {($bboxTar[3] - $bboxTar[0]), ($bboxTar[4] - $bboxTar[1]), ($bboxTar[5] - $bboxTar[2])};
    float $scaleRatio[] = {($bboxSizeTar[0]/$bboxSizeCur[0]), ($bboxSizeTar[1]/$bboxSizeCur[1]), ($bboxSizeTar[2]/$bboxSizeCur[2])};
    scale -p ($bboxSclCen[0]) ($bboxSclCen[1]) ($bboxSclCen[2]) -r ($scaleRatio[0]) ($scaleRatio[1]) ($scaleRatio[2]) $cur;
}






proc Freeze()   {
     FreezeTransformations;   
}



proc reScale()  {
     scale -r 100 100 100;
}



proc povittoorigin(){
     $mySelection = `ls -sl -type "transform"`;
     string $polyobj;
        for ($polyobj in $mySelection) {
            string $PscaleObj = $polyobj + ".scalePivot";
            string $ProtObj = $polyobj + ".rotatePivot";

            move -xz 0 0 0 $PscaleObj $ProtObj;
        }
}


proc centerPivot(){
$mySelection = `ls -sl -type "transform"`;
string $polyobj;

    for ($polyobj in $mySelection) {
        float $BBox[] = `xform -q -ws -bb $polyobj`; // get the bounding box info
        xform -ws -p true -cp $polyobj; // center pivot
        float $centerPos[] = `xform -q -ws -sp $polyobj`;
        xform -ws -piv $centerPos[0] $BBox[1] $centerPos[2] $polyobj; //move Pivot to bottom, but keep in center
    }
}




Align_to_target();
